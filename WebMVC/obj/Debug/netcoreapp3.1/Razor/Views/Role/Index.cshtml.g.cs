#pragma checksum "C:\Users\Tresna_WH\Documents\CodingCamp44\CodingCamp44\WebMVC\Views\Role\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "7c7810e61cb0b233e8595448999e67d3eef51177"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Role_Index), @"mvc.1.0.view", @"/Views/Role/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Tresna_WH\Documents\CodingCamp44\CodingCamp44\WebMVC\Views\_ViewImports.cshtml"
using WebMVC;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Tresna_WH\Documents\CodingCamp44\CodingCamp44\WebMVC\Views\_ViewImports.cshtml"
using WebMVC.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"7c7810e61cb0b233e8595448999e67d3eef51177", @"/Views/Role/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d07e873f05b36c9d83cd6a184d4bfbe1720fee4b", @"/Views/_ViewImports.cshtml")]
    public class Views_Role_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("formRole"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\Tresna_WH\Documents\CodingCamp44\CodingCamp44\WebMVC\Views\Role\Index.cshtml"
   
    Layout = "~/Views/Shared/_Layout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"<a href=""javasript:void(0)"" class=""btn bg-transparent text-success"" data-toggle=""modal"" data-target=""#addModal""><i class=""fas fa-plus""></i></a>
<div class=""container-fluid mt-5"">
    <table class=""table table-striped table-bordered"" id=""myTable"" style=""width:100%"">
        <thead class=""badge-info"">
            <tr>
                <th>No.</th>
                <th>Id</th>
                <th>Name</th>
                <th>Action</th>
            </tr>
        </thead>
        <tfoot class=""badge-info"">
            <tr>
                <th>No.</th>
                <th>Id</th>
                <th>Name</th>
                <th>Action</th>
            </tr>
        </tfoot>
        <tbody></tbody>
    </table>
</div>


<div class=""modal fade"" id=""addModal"" tabindex=""-1"" role=""dialog"" aria-labelledby=""addModalLabel"" aria-hidden=""true"">
    <div class=""modal-dialog"" role=""document"">
        <div class=""modal-content"">
            <div class=""modal-header badge-info"">
                <h5 c");
            WriteLiteral(@"lass=""modal-title"" id=""addModalLabel"">Role Form</h5>
                <button type=""button"" class=""close"" data-dismiss=""modal"" onclick=""Close()"" aria-label=""Close"">
                    <span aria-hidden=""true"">&times;</span>
                </button>
            </div>
            <div class=""modal-body"">
                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "7c7810e61cb0b233e8595448999e67d3eef511775231", async() => {
                WriteLiteral(@"
                    <div class=""form-group"" hidden>
                        <label for=""id"" class=""col-form-label"">Id</label>
                        <input type=""text"" class=""form-control"" id=""id"">
                    </div>
                    <div class=""form-group"">
                        <label for=""name"" class=""col-form-label"">Name</label>
                        <input type=""text"" class=""form-control"" id=""name"" name=""rolename"" placeholder=""Role Name"" required>
                    </div>
                    <div class=""checkbox"">
                        <input type=""checkbox"" class=""custom-checkbox"" id=""checkbox1"" name=""checkbox1"">
                        <label for=""checkbox1"" class=""col-form-label"">I agree</label>
                    </div>
                ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n            </div>\r\n            <div class=\"modal-footer badge-info\">\r\n                <button type=\"button\" class=\"btn btn-primary\" id=\"clickBtn\">Submit</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n");
            DefineSection("scripts", async() => {
                WriteLiteral(@"
    <script>
        var table = null;
        $(document).ready(function () {
            $('#formRole').validate({
                rules: {
                    rolename: {
                        required: true,
                        maxlength: 20
                    },
                    checkbox1: ""required""
                },
                messages: {
                    rolename: {
                        required: ""please enter the role name!"",
                        maxlength: ""maximum 20 characters!""
                    },
                    checkbox1:"" please accept this one!""
                },
                errorPlacement: function (error, element) {
                    if (element.is("":checkbox"")) {
                        error.appendTo(element.parents("".checkbox""));
                    } else {
                        error.insertAfter(element);
                    }
                }

            });
            table = $(""#myTable"").DataTable({
         ");
                WriteLiteral(@"       ""filter"": true,
                ""orderMulti"": false,
                ""ajax"": {
                    ""url"": ""https://localhost:44383/api/role"",
                    ""type"": ""get"",
                    ""datatype"": ""json"",
                    ""dataSrc"": ""data""
                },
                ""columnDefs"": [
                    {
                        ""targets"": [0, 2],
                        ""visible"": true,
                        ""orderable"": true,
                        ""searchable"": true
                    },
                    {
                        ""targets"": [1],
                        ""visible"": false
                    },
                    {
                        ""targets"": [3],
                        ""visible"": true,
                        ""orderable"": false,
                        ""width"": ""15%""
                    }
                ],
                ""columns"": [
                    {
                        ""data"": null,
                        """);
                WriteLiteral(@"render"": function (data, type, row, meta) {
                            return meta.row + meta.settings._iDisplayStart + 1;
                        }
                    },
                    {
                        ""data"": null,
                        ""render"": function (data, type, row) {
                            return row['id'];
                        },
                        ""autoWidth"": true
                    },
                    {
                        ""data"": null,
                        ""render"": function (data, type, row) {
                            return row['name'];
                        },
                        ""autoWidth"": true
                    },
                    {
                        ""render"": function (data, type, row, meta) {
                            return '<a href=""javascript:void(0)"" class=""far fa-edit table-action text-dark"" data-toggle=""tooltip"" data-placement=""top"" title=""Edit"" onclick=""Get(\'' + row['id'] + '\')""></a> ' +
     ");
                WriteLiteral(@"                           '<a href=""javascript:void(0)"" class=""fa fa-trash table-action text-danger"" data-toggle=""tooltip"" data-placement=""top"" title=""Delete"" onclick=""Delete(\'' + row['id'] + '\')""></a>'
                        }
                    }
                ],
                language: {
                    paginate: {
                        next: 'Next',
                        previous: 'Previous'
                    }
                }
            })

            $(""#clickBtn"").on(""click"", function (e) {
                e.preventDefault();
                if ($(""#formRole"").valid()) {
                    Submit();
                }
            });
        });

        function Close() {
            $(""#id"").val(null);
            $(""#name"").val(null);
        }

        function Get(id) {
            $.ajax({
                url: ""/role/Get"",
                data: { id: id }
            }).done((result) => {
                console.log(result);
                va");
                WriteLiteral(@"r obj = JSON.parse(result);
                $(""#addModal"").modal(""show"");
                $(""#id"").val(obj.data.id);
                $(""#name"").val(obj.data.name);
            }).fail((error) => {
                console.log(error);
            })
        }

        function Create() {
            var role = new Object();
            role.name = $(""#name"").val();
            $.ajax({
                url: ""/role/Create"",
                type: ""post"",
                data: role
            }).done((result) => {
                $(""#addModal"").modal(""hide"");
                $(""#id"").val(null);
                $(""#name"").val(null);
                table.ajax.reload();
            }).fail((error) => {
                console.log(error);
            });
        }

        function Update(id) {
            var role = new Object();
            role.id = id;
            role.name = $(""#name"").val();
            $.ajax({
                url: ""/role/Update"",
                type: ""put"",
 ");
                WriteLiteral(@"               data: role
            }).done((result) => {
                if (result == 200) {
                    swal({
                        title: ""Success!"",
                        text: ""Data Updated"",
                        icon: ""success"",
                        button: ""Ok"",
                    });
                    $(""#addModal"").modal(""hide"");
                    $(""#id"").val(null);
                    $(""#name"").val(null);
                    table.ajax.reload();
                } else if (result == 400) {
                    swal(""failed to add data"", {
                        icon: ""warning"",
                    });
                } else {
                    swal(""failed to add data"", {
                        icon: ""warning"",
                    });
                }
            }).fail((error) => {
                console.log(error);
            });
        }

        function Submit() {
            var id = $(""#id"").val();

            if (id == """" || ");
                WriteLiteral(@"id == "" "") {
                console.log(""post accessed"")
                Create();
            } else {
                console.log(""put accessed"")
                Update(id);
            }
        }

        function Delete(id) {
            swal({
                title: 'Are you sure?',
                text: ""You won't be able to revert this!"",
                icon: 'warning',
                buttons: true,
                dangerMode:true,
            }).then((willDelete) => {
                if (willDelete) {
                    $.ajax({
                        url: ""/role/Delete"",
                        type: ""delete"",
                        data: { id: id }
                    }).done((result) => {
                        if (result == 200) {
                            swal(
                                'Deleted!',
                                'Your file has been deleted.',
                                'success'
                            )
                     ");
                WriteLiteral(@"       table.ajax.reload();
                        } else if (result == 404) {
                            swal(
                                'ID NOT FOUND!',
                                'Your file failed to delete.',
                                'error'
                            )
                        } else {
                            swal(
                                'Warning!',
                                'Your id is not valid.',
                                'warning'
                            )
                        }
                    }).fail((error) => {
                        console.log(error);
                    })
                }
                else {
                    swal(
                        'Your data is Safe !'
                    )
                }
            })
        }
    </script>
");
            }
            );
            WriteLiteral("\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
